{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": "AWS::Serverless-2016-10-31",
  "Description": "Exported by architect/package@9.0.3 on 2024-05-23T17:51:43.903Z",
  "Resources": {
    "Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": "ArcGlobalPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                    "logs:DescribeLogStreams"
                  ],
                  "Resource": "arn:aws:logs:*:*:*"
                }
              ]
            }
          },
          {
            "PolicyName": "ArcDynamoPolicy",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "dynamodb:*",
                  "Resource": [
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}",
                        {
                          "tablename": {
                            "Ref": "TodosTable"
                          }
                        }
                      ]
                    },
                    {
                      "Fn::Sub": [
                        "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${tablename}/*",
                        {
                          "tablename": {
                            "Ref": "TodosTable"
                          }
                        }
                      ]
                    }
                  ]
                },
                {
                  "Effect": "Deny",
                  "Action": "dynamodb:DeleteTable",
                  "Resource": {
                    "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/*"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    "TodosParam": {
      "Type": "AWS::SSM::Parameter",
      "Properties": {
        "Type": "String",
        "Name": {
          "Fn::Sub": [
            "/${AWS::StackName}/tables/${tablename}",
            {
              "tablename": "todos"
            }
          ]
        },
        "Value": {
          "Ref": "TodosTable"
        }
      }
    },
    "ParameterStorePolicy": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "Role",
      "Properties": {
        "PolicyName": "ArcParameterStorePolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}",
                  {}
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*",
                  {}
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "ssm:GetParametersByPath",
                "ssm:GetParameter"
              ],
              "Resource": {
                "Fn::Sub": [
                  "arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/${AWS::StackName}/*/*",
                  {}
                ]
              }
            }
          ]
        },
        "Roles": [
          {
            "Ref": "Role"
          }
        ]
      }
    },
    "TodosTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "KeySchema": [
          {
            "AttributeName": "id",
            "KeyType": "HASH"
          }
        ],
        "AttributeDefinitions": [
          {
            "AttributeName": "id",
            "AttributeType": "S"
          }
        ],
        "BillingMode": "PAY_PER_REQUEST"
      }
    },
    "CreateCustomLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/bedrock/src/agent/create",
        "Runtime": "nodejs20.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "bedrock2",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "custom",
        "name": "create"
      }
    },
    "ListCustomLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/bedrock/src/agent/list",
        "Runtime": "nodejs20.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "bedrock2",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "custom",
        "name": "list"
      }
    },
    "UpdateCustomLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/bedrock/src/agent/update",
        "Runtime": "nodejs20.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "bedrock2",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "custom",
        "name": "update"
      }
    },
    "DestroyCustomLambda": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "CodeUri": "/Users/brian/Repo/bedrock/src/agent/destroy",
        "Runtime": "nodejs20.x",
        "Architectures": [
          "arm64"
        ],
        "MemorySize": 1152,
        "EphemeralStorage": {
          "Size": 512
        },
        "Timeout": 5,
        "Environment": {
          "Variables": {
            "ARC_APP_NAME": "bedrock2",
            "ARC_ENV": "staging",
            "ARC_ROLE": {
              "Ref": "Role"
            },
            "ARC_SESSION_TABLE_NAME": "jwe",
            "ARC_STACK_NAME": {
              "Ref": "AWS::StackName"
            }
          }
        },
        "Role": {
          "Fn::Sub": [
            "arn:aws:iam::${AWS::AccountId}:role/${roleName}",
            {
              "roleName": {
                "Ref": "Role"
              }
            }
          ]
        },
        "Events": {}
      },
      "ArcMetadata": {
        "pragma": "custom",
        "name": "destroy"
      }
    },
    "SecretAgentMan": {
      "Type": "AWS::Bedrock::Agent",
      "Properties": {
        "AgentName": "bedrock2 agent",
        "FoundationModel": "anthropic.claude-v2:1",
        "Instruction": "a simple but friendly bot for basic task management; create, list, update and remove tasks",
        "ActionGroups": [
          {
            "ActionGroupName": "create",
            "ActionGroupExecutor": {
              "Lambda": {
                "Ref": "CreateCustomLambda"
              }
            },
            "FunctionSchema": {
              "Functions": [
                {
                  "Name": "create",
                  "Parameters": [
                    {
                      "Description": "text",
                      "Type": "string",
                      "Required": false
                    },
                    {
                      "Description": "due",
                      "Type": "number",
                      "Required": true
                    },
                    {
                      "Description": "done",
                      "Type": "boolean",
                      "Required": true
                    }
                  ]
                }
              ]
            }
          },
          {
            "ActionGroupName": "list",
            "ActionGroupExecutor": {
              "Lambda": {
                "Ref": "ListCustomLambda"
              }
            }
          },
          {
            "ActionGroupName": "update",
            "ActionGroupExecutor": {
              "Lambda": {
                "Ref": "UpdateCustomLambda"
              }
            },
            "FunctionSchema": {
              "Functions": [
                {
                  "Name": "update",
                  "Parameters": [
                    {
                      "Description": "id",
                      "Type": "string",
                      "Required": false
                    },
                    {
                      "Description": "text",
                      "Type": "string",
                      "Required": true
                    },
                    {
                      "Description": "due",
                      "Type": "number",
                      "Required": true
                    },
                    {
                      "Description": "done",
                      "Type": "boolean",
                      "Required": true
                    }
                  ]
                }
              ]
            }
          },
          {
            "ActionGroupName": "destroy",
            "ActionGroupExecutor": {
              "Lambda": {
                "Ref": "DestroyCustomLambda"
              }
            },
            "FunctionSchema": {
              "Functions": [
                {
                  "Name": "destroy",
                  "Parameters": [
                    {
                      "Description": "id",
                      "Type": "string",
                      "Required": false
                    }
                  ]
                }
              ]
            }
          }
        ]
      }
    }
  },
  "Outputs": {}
}
